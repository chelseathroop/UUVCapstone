/*
 * CAPSTONE_BUTTON_SERVICE_R1.c
 *
 * Created: 4/7/2015 3:49:04 PM
 *  Author: PHU NGUYEN
 * Changes: 
		- Assigned the same GPIO for FF button, 
		- Assigned the sane GPIO for Menu button ( combined Menu1, Menu8, Menu8 into Menu1) 
 */ 

#ifndef F_CPU
#define F_CPU 16000000UL // 16 MHz clock speed
#endif

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include <avr/interrupt.h>
#include <math.h>
#include <avr/eeprom.h> 
#include <UUV.h>

#define NUM_EXECUTIONS_ADDRESS 0x00 // define the address for writing and reading  the data in/ from

/* Define the data array to pass the value to RTC and loop condition
   Array format : ALARM [N][6]= {{YYYY,MM,DD,HH,MI,FS}, {YYYY,MM,DD,HH,MM,FS},...}
   where:  YYYY for Year, MM for month...FS for sample rate. N : number of event (alarm)
   N  is calculated by pre-mission script
*/

int const k =6;

	
	int i, j;


/* Define output port (pin) for button service

Change Sample Rate
1.	Menu  --> Menu1
2.	Fast Forward --> FastForward2
3.	Minus --> Minus
4.	Fast Forward--> FastForward4
5.	Down – 44.1k --> Down
6.	Middle - 48k -->Middle
7.	Up – 96k -->Up
8.	Menu -->Menu8
9.	Menu -->Menu9

Record
1.	Record --> Record
2.	Stop/Home --> Stop

 
*/  

#define Menu1_port				PORTD                  // Menu button
#define Menu1_bit				PORTD0
#define Menu1_ddr				DDRD


#define FastForward2_port		PORTD                   // Fast Forward button 
#define FastForward2_bit		PORTD1
#define FastForward2_ddr		DDRD

#define Minus_port				PORTD                   // Minus button
#define Minus_bit				PORTD2
#define Minus_ddr				DDRD

#define FastForward4_port		PORTD                   // Fast Forward button repeated press
#define FastForward4_bit		PORTD4
#define FastForward4_ddr		DDRD

#define Down_port				PORTD                   // Down button
#define Down_bit				PORTD5
#define Down_ddr				DDRD

#define Middle_port				PORTD                   // Middle button
#define Middle_bit				PORTD6
#define Middle_ddr				DDRD


#define Up_port					PORTD                     // Up button
#define Up_bit					PORTD7
#define Up_ddr					DDRD


#define Menu8_port				PORTC                   // Menu button repeated press in service sequence
#define Menu8_bit				PORTC0
#define Menu8_ddr				DDRC

#define Menu9_port				PORTC                   // Menu button repeated press in service sequence
#define Menu9_bit				PORTC1
#define Menu9_ddr				DDRC


#define Record_port				PORTC	                   // Record button press 
#define Record_bit				PORTC2
#define Record_ddr				DDRC


#define Stop_port				PORTC                   // Stop button press
#define Stop_bit				PORTC3
#define Stop_ddr				DDRC


#define MuxControl1_port		PORTB                   // Mux control line 1 
#define MuxControl1_bit		   PORTB1
#define MuxControl1_ddr			DDRB



#define MuxControl2_port		PORTB                   // Mux control line 2
#define MuxControl2_bit			PORTB2
#define MuxControl2_ddr			DDRB



// Function Prototypes
void sample_rate_44();
void sample_rate_48();
void sample_rate_96();
 
 
/******************************* Main Program Code *************************/
int main(void)
{
	
//******* configure the microprocessor pins for input******

// Sample Rate change
   Menu1_ddr &=~(1<<Menu1_bit);                 
   FastForward2_ddr &=~(1<<FastForward2_bit);
   Minus_ddr &=~(1<<Minus_bit);
   FastForward4_ddr &=~(1<<FastForward4_bit);
   Down_ddr&=~(1<<Down_bit);
   Middle_ddr&=~(1<<Middle_bit);
   Up_ddr&=~(1<<Up_bit);	  
   Menu8_ddr&=~(1<<Menu8_bit);
   Menu9_ddr&=~(1<<Menu9_bit); 
 
 // Record
 	Record_ddr&=~(1<<Record_bit);
	//Stop_ddr|=(1<<Stop_bit); // set Stop_bit as an output
	Stop_ddr&=~(1<<Stop_bit); // set Stop bit as input
	

 // Mux control line
 
	MuxControl1_ddr |=(1<<MuxControl1_bit);
	MuxControl2_ddr|=(1<<MuxControl2_bit);
	
		
/***** Initilize the outputs***************/
/*
PORTD&=~(1<<Menu1_bit); PORTD&=~(1<<FastForward2_bit);PORTD&=~(1<<Minus_bit); PORTD&=~(1<<FastForward4_bit);
PORTD&=~(1<<Down_bit); PORTD&=~(1<<Middle_bit);PORTD&=~(1<<Up_bit);
PORTC&=~(1<<Menu8_bit); PORTC&=~(1<<Menu9_bit);PORTC&=~(1<<Record_bit); PORTC&=~(1<<Stop_bit);PORTB&=~(1<<MuxControl1_bit) ; PORTB&=~(1<<MuxControl2_bit) ; 
*/

/* 
INTERRUPT DETECTION LOOP SHOULD GO HERE
MCU WAKE-UP CODE HERE
CONDITION LOOPS FOR CHOOSING SD CARD, SAMPLE RATE SHOULD GO HERE 
....
*/


/*************************************************
RECORDING WITH SAMPLE RATE OF 44.1 k AND STORING THE DATA TO FIRST SD CARD

************************************************/
//uint16_t num_executions;
//eeprom_write_word((uint16_t*)NUM_EXECUTIONS_ADDRESS,num_executions);

uint16_t num_executions = eeprom_read_word((uint16_t*)NUM_EXECUTIONS_ADDRESS);
i=num_executions;


if (num_executions==0xFFFF) num_executions=0;
num_executions++;
eeprom_write_word((uint16_t*)NUM_EXECUTIONS_ADDRESS,num_executions);


//Select first SD card (00) for storing data
// Important : select the SD card after interrupt and before turning on Tascam

PORTB&=~(1<<MuxControl1_bit) ; 
PORTB&=~(1<<MuxControl2_bit);



if (alarm_schedule[i][5]==44) {sample_rate_44();}
else
{if (alarm_schedule[i][5]==48) {sample_rate_48();}
else
{if (alarm_schedule[i][5]==96) {sample_rate_96();}
else {
	// test the conditional loop
	
	for (j=0;j<(i+1);j++)
	
	{
		
	
	PORTB|=(1<<MuxControl1_bit) ; PORTB|=(1<<MuxControl2_bit) ; // just for testing the condition loop
	_delay_ms(500);
	PORTB&=~(1<<MuxControl1_bit) ; PORTB&=~(1<<MuxControl2_bit);
	_delay_ms(500);
	
	}
}
}
}


sample_rate_44(); // call the function to set up the sample rate at 44.1K


// Switch SD card
PORTB&=~(1<<MuxControl1_bit) ; PORTB&=~(1<<MuxControl2_bit) ; 

PORTB&=~(1<<MuxControl1_bit) ; PORTB|=(1<<MuxControl2_bit);


/******* code for MCU go to sleep here 
....

***********/

_delay_ms(1000);

/*************************************************
RECORDING WITH SAMPLE RATE OF 48 k AND STORING THE DATA TO SECOND SD CARD

************************************************/

sample_rate_48() ; // calling the function to set up the sample rate of 48K

// Switch SD card

PORTB&=~(1<<MuxControl1_bit) ; PORTB&=~(1<<MuxControl2_bit) ; 

PORTB|=(1<<MuxControl1_bit); PORTB&=~(1<<MuxControl2_bit) ; 


/******* code for MCU go to sleep here
....
***********/

_delay_ms(1000);



/*************************************************
RECORDING WITH SAMPLE RATE OF 96 k AND STORING THE DATA TO Third SD CARD

************************************************/

sample_rate_96() ; //calling the function to set up the sample rate at 96K

/**********************/

/*
PORTD&=~(1<<Menu1_bit); PORTD&=~(1<<FastForward2_bit);PORTD&=~(1<<Minus_bit); PORTD&=~(1<<FastForward4_bit);
PORTD&=~(1<<Down_bit); PORTD&=~(1<<Middle_bit);PORTD&=~(1<<Up_bit);
PORTC&=~(1<<Menu8_bit); PORTC&=~(1<<Menu9_bit);PORTC&=~(1<<Record_bit); 
*/
//PORTC&=~(1<<Stop_bit);


PORTB&=~(1<<MuxControl1_bit);
PORTB&=~(1<<MuxControl2_bit);


// end of main loop here
}

// Functions  

void sample_rate_44()
{
	

	/*******Turn on the Tascam***************/


	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);


	/******Set the sample rate of 44.1K here******************
	1.	Menu  --> Menu1
	2.	Fast Forward --> FastForward2
	3.	Minus --> Minus
	4.	Fast Forward--> FastForward2
	5.	Down --> 44.1k --> Down
	8.	Menu -->Menu1
	9.	Menu -->Menu1
	Need to confirm this sequence is correct

	***********************************************************/

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);


	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);

	_delay_ms(500);

	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);

	PORTD&=~(1<<Down_bit);
	Down_ddr|=(1<<Down_bit);
	_delay_ms(1000);
	Down_ddr&=~(1<<Down_bit);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);

	_delay_ms(1000);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);

	// Start recording with sample rate =44.1K for 2015 second


	PORTC&=~(1<<Record_bit);
	Record_ddr|=(1<<Record_bit);
	_delay_ms(1000);
	Record_ddr&=~(1<<Record_bit);


	// Just to indicate that the recording process is goign on
	PORTD&=~(1<<Down_bit);
	Down_ddr|=(1<<Down_bit);



	PORTD&=~(1<<Middle_bit);
	Middle_ddr|=(1<<Middle_bit);



	PORTD&=~(1<<Up_bit);
	Up_ddr|=(1<<Up_bit);
	_delay_ms(3000);

	Up_ddr&=~(1<<Up_bit);
	Down_ddr&=~(1<<Down_bit);
	Middle_ddr&=~(1<<Middle_bit);






	//Stop recording, turn off TASCAM

	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);


}

void sample_rate_48()
{
	
	/*******Turn on the Tascam***************/


	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);


	/********************************************************/
	/********************************************************/
	/******Set the sample rate of 48 K here******************

	1.	Menu  --> Menu1
	2.	Fast Forward --> FastForward2
	3.	Minus --> Minus
	4.	Fast Forward--> FastForward4
	6.	Middle - 48k -->Middle
	8.	Menu -->Menu8
	9.	Menu -->Menu9


	***********************************************************/

	//Comment out for testing


	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);


	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);


	PORTD&=~(1<<Minus_bit);
	Minus_ddr|=(1<<Minus_bit);
	_delay_ms(1000);
	Minus_ddr&=~(1<<Minus_bit);

	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);

	PORTD&=~(1<<Middle_bit);
	Middle_ddr|=(1<<Middle_bit);
	_delay_ms(1000);
	Middle_ddr&=~(1<<Middle_bit);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);

	_delay_ms(1000);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);

	// Start recording with sample rate =48K for 2015 second

	PORTC&=~(1<<Record_bit);
	Record_ddr|=(1<<Record_bit);
	_delay_ms(1000);
	Record_ddr&=~(1<<Record_bit);


	// Just to show that the record is in process


	PORTD&=~(1<<Down_bit);
	Down_ddr|=(1<<Down_bit);



	PORTD&=~(1<<Middle_bit);
	Middle_ddr|=(1<<Middle_bit);



	PORTD&=~(1<<Up_bit);
	Up_ddr|=(1<<Up_bit);
	_delay_ms(3000);

	Up_ddr&=~(1<<Up_bit);
	Down_ddr&=~(1<<Down_bit);
	Middle_ddr&=~(1<<Middle_bit);




	//Stop recording, turn off TASCAM


	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);


}

void sample_rate_96()
{
	
	/*************************************************
	RECORDING WITH SAMPLE RATE OF 96k AND STORING THE DATA TO THIRD SD CARD

	************************************************/

	/*******Turn on the Tascam***************/

	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);

	/********************************************************/
	/********************************************************/
	/******SEQUENCE FOR Setting up the sample rate of 96K   here******************

	1.	Menu  --> Menu1
	2.	Fast Forward --> FastForward2
	3.	Minus --> Minus
	4.	Fast Forward--> FastForward4
	7.	Up – 96k -->Up
	8.	Menu -->Menu8
	9.	Menu -->Menu9


	***********************************************************/

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);


	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);


	PORTD&=~(1<<Minus_bit);
	Minus_ddr|=(1<<Minus_bit);
	_delay_ms(1000);
	Minus_ddr&=~(1<<Minus_bit);

	PORTD&=~(1<<FastForward2_bit);
	FastForward2_ddr|=(1<<FastForward2_bit);
	_delay_ms(1000);
	FastForward2_ddr&=~(1<<FastForward2_bit);

	PORTD&=~(1<<Up_bit);
	Up_ddr|=(1<<Up_bit);
	_delay_ms(1000);
	Up_ddr&=~(1<<Up_bit);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);

	_delay_ms(1000);

	PORTD&=~(1<<Menu1_bit);
	Menu1_ddr|=(1<<Menu1_bit);
	_delay_ms(1000);
	Menu1_ddr&=~(1<<Menu1_bit);


	// Start recording with sample rate =48K for 2015 second

	PORTC&=~(1<<Record_bit);
	Record_ddr|=(1<<Record_bit);
	_delay_ms(1000);
	Record_ddr&=~(1<<Record_bit);

	// Just to indicate that the recording process is goign on
	PORTD&=~(1<<Down_bit);
	Down_ddr|=(1<<Down_bit);



	PORTD&=~(1<<Middle_bit);
	Middle_ddr|=(1<<Middle_bit);



	PORTD&=~(1<<Up_bit);
	Up_ddr|=(1<<Up_bit);
	_delay_ms(3000);

	Up_ddr&=~(1<<Up_bit);
	Down_ddr&=~(1<<Down_bit);
	Middle_ddr&=~(1<<Middle_bit);




	//Stop recording, turn off TASCAM


	PORTC&=(1<<Stop_bit); // out put 0 (ground) for Stop_bit
	Stop_ddr|=(1<<Stop_bit); // set Stop_bit to output
	_delay_ms(3000);
	Stop_ddr&=~(1<<Stop_bit);

}


/******************************* End of Main Program Code ******************/
